[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;
uniform float blinkValue;
uniform vec3 blinkcolor = vec3(1,1,1);
uniform bool edgeShading = false;
uniform vec4 edgeColor : hint_color = vec4(1);
uniform float lineThickness : hint_range(0.0, 10.0) = 1.0;
uniform sampler2D noise;
uniform float noiseEffectivenes : hint_range(0.0,1.0) = 0.0;
uniform float num_hor_frames = 3.0;
uniform float hor_index = 0.0;
uniform float num_ver_frames = 4.0;
uniform float ver_index = 0.0;
float WorleyNoise(vec2 fromPoint, vec2 point, vec2 point2, vec2 point3)
{
	float result = min(min(distance(fromPoint, point), distance(fromPoint, point2)), distance(fromPoint, point3));
	return result;
}
float Outline(vec2 pixelSize, sampler2D tex, vec2 uv, float thickness, bool shouldOutline)
{
	vec2 size = pixelSize * lineThickness * float(edgeShading);
	float left = texture(tex, uv + vec2(-size.x, 0)).a;
	float right = texture(tex, uv + vec2(size.x, 0)).a;
	float up = texture(tex, uv + vec2(0, -size.y)).a;
	float down = texture(tex, uv + vec2(0, size.y)).a;
	float upperLeft = texture(tex, uv + vec2(-size.x,-size.y)).a;
	float upperRight = texture(tex, uv + vec2(size.x,-size.y)).a;
	float bottomLeft = texture(tex, uv + vec2(-size.x,size.y)).a;
	float bottomRight = texture(tex, uv + vec2(size.x,size.y)).a;
	float sum = left + right + up + down + upperLeft + upperRight + bottomLeft + bottomRight;
	
	float outline = min(sum, 1.0);
	return outline;
}
void fragment()
{
	float outline = Outline(TEXTURE_PIXEL_SIZE, TEXTURE, UV, lineThickness, edgeShading);
	float noiseValue = texture(noise,UV).r;
	
	vec4 color = texture(TEXTURE,UV);
	vec4 deathColor = vec4(0,0,0,0);
	COLOR = mix(color, edgeColor, outline - color.a);
	float UV_X = (UV.x * num_hor_frames - hor_index);
	float UV_Y = (UV.y * num_ver_frames - ver_index);
	float worley = WorleyNoise(vec2(UV_X,UV_Y),vec2(0.5,0.9),vec2(0.4,0.7),vec2(0.7,0.6));
	if(worley < noiseEffectivenes)
	{
		COLOR.a = 0.0;
	}
	COLOR+= vec4(blinkValue*blinkcolor.r,blinkValue*blinkcolor.g,blinkValue*blinkcolor.b,0);
}
"
